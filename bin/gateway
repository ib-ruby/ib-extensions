#!/usr/bin/env ruby
### loads the active-orient environment 
### and starts an interactive shell
###
### Parameter: t)ws | g)ateway (or number of port ) Default: Gateway ,
###							client_id , Default 2000
require 'bundler/setup'
require 'yaml'

require 'logger'
LogLevel = Logger::DEBUG  ##INFO # DEBUG # ERROR 
#require File.expand_path(File.dirname(__FILE__) + "/../config/boot")

require 'ib-gateway'
require 'ib/symbols'
class Array
  # enables calling members of an array. which are hashes  by it name
  # i.e
  #
  #  2.5.0 :006 > C.received[:OpenOrder].local_id
  #   => [16, 17, 21, 20, 19, 8, 7] 
  #   2.5.0 :007 > C.received[:OpenOrder].contract.to_human
  #    => ["<Bag: IECombo SMART USD legs:  >", "<Stock: GE USD>", "<Stock: GE USD>", "<Stock: GE USD>", "<Stock: GE USD>", "<Stock: WFC USD>", "<Stock: WFC USD>"] 
  #
  # its included only in the console, for inspection purposes

  def method_missing(method, *key)
    unless method == :to_hash || method == :to_str #|| method == :to_int
      return self.map{|x| x.public_send(method, *key)}
    end

  end
end # Array

# read items from console.yml 
read_yml = -> (key) do
		YAML::load_file( File.expand_path('../console.yml',__FILE__))[key]
	end



  puts 
  puts ">> I B â€“ G A T E W A Y  Interactive Console <<" 
  puts '-'* 45
  puts 
  puts "Namespace is IB ! "
  puts
 
  include IB
  require 'irb'
  client_id = ARGV[1] || read_yml[:client_id]
  specified_port = ARGV[0] || 'Gateway'
	port =  case specified_port
					when Integer
						specified_port  # just use the number
					when /^[gG]/ 
						read_yml[:gateway]
					when /^[Tt]/
						read_yml[:tws]
					end

  ARGV.clear
	
  ## The Block takes instructions which are executed  after initializing all instance-variables
  ## and prior to the connection-process
  ## Here we just subscribe to some events  
	begin
    G =  Gateway.new get_account_data: true, serial_array: true, host: '10.247.8.109',
			client_id: client_id, port: port , 
			watchlists: [:Spreads, :Stillhalter, :BuyAndHold] do |c|
        c.tws.subscribe( :Alert, :ContractDataEnd, :ManagedAccounts, :OrderStatus ) {| m| c.logger.info { m.to_human } }
      end
  rescue IB::TransmissionError => e
    if e.message =~ /client-id/
      IB::Connection.logger.fatal "Increasing client_id"
      client_id +=1
      retry
    else
      puts "E: #{e.inspect}"
      puts "Please restart"
      Kernel.exit
    end
	end

	C =  G.tws

  C.subscribe(:TickGeneric, :TickOption, :TickRequestParameters, :MarketDataType, :TickString, :TickSize  ){|x| x }
  unless  C.received[:OpenOrder].blank?
        puts "------------------------------- OpenOrders ----------------------------------"
    puts C.received[:OpenOrder].to_human.join "\n"
    puts  " ---------------- Open Orders are present in G.clients.orders --------------"
    puts ""
  end
  puts  "Connection established on Port  #{port}, client_id #{client_id} used"
  puts
  puts  "----> G    points to the Gateway-Instance"
	puts  "----> C    points to the Connection-Instance"
  puts
  puts  "some basic Messages are subscribed and accordingly displayed"
  puts '-'* 45

  begin
  IRB.start(__FILE__)
  #rescue  IB::OrderAttributeError => e
  #  puts "OrderAtttribute ERROR"
  end

